@page "/product-list"
@using LLVG20240907.DTOs.ProductsDTOs
@using System.Text.Json
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Forms
@using LLVG20240907.API.Services

<h3>Buscar Producto</h3>
<EditForm Model="searchQuery" OnValidSubmit="SubmitSearch">
    <div class="row mb-3">
        <div class="col-md-6">
            <div class="form-group">
                <label for="NombreLLVG">Nombre:</label>
                <InputText id="NombreLLVG" class="form-control" @bind-Value="searchQuery.NombreLLVG_Like" />
            </div>
        </div>
        <div class="col-md-4">
            <div class="form-group">
                <label for="Take">Resultados por Página:</label>
                <select id="Take" class="form-select" @bind="searchQuery.Take">
                    @for (var i = 10; i <= 1000; i += 10)
                    {
                        <option value="@i">@i</option>
                    }
                </select>
            </div>
        </div>
    </div>
    <div class="d-flex mb-3">
        <button type="submit" class="btn btn-primary me-2">Buscar</button>
        <NavLink href="/create-product" class="btn btn-secondary">Crear Producto</NavLink>
    </div>
</EditForm>

<h3 class="mt-4">Lista de Productos</h3>
<div class="table-responsive">
    @if (searchResult != null && searchResult.Data != null && searchResult.Data.Count > 0)
    {
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Nombre</th>
                    <th>Descripción</th>
                    <th>Precio</th>
                    <th>Acciones</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var product in searchResult.Data)
                {
                    <tr>
                        <td>@product.NombreLLVG</td>
                        <td>@product.DescripcionLLVG</td>
                        <td>@product.PrecioLLVG</td>
                        <td>
                            <button class="btn btn-warning btn-sm me-2" @onclick="() => GoEdit(product.Id)">Editar</button>
                            <button class="btn btn-info btn-sm me-2" @onclick="() => GoDetails(product.Id)">Ver</button>
                            <button class="btn btn-danger btn-sm" @onclick="() => GoDelete(product.Id)">Eliminar</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <p>No se encontraron productos.</p>
    }
</div>

<nav aria-label="Page navigation">
    <ul class="pagination justify-content-center">
        <li class="page-item @(searchQuery.Skip == 0 ? "disabled" : "")">
            <a class="page-link" @onclick="async () => await PaginationSearch(skipAnte)">Anterior</a>
        </li>
        @foreach (var item in paginations)
        {
            <li class="page-item @(item.Skip == searchQuery.Skip ? "active" : "")">
                <a class="page-link" @onclick="async () => await PaginationSearch(item.Skip)">@item.NumPage</a>
            </li>
        }
        <li class="page-item @(searchQuery.Skip + searchQuery.Take >= searchResult.CountRow ? "disabled" : "")">
            <a class="page-link" @onclick="async () => await PaginationSearch(skipSi)">Siguiente</a>
        </li>
    </ul>
</nav>

<div class="text-center mt-3">
    <span>Total registros: <strong>@searchResult.CountRow</strong></span>
</div>

@code {
    [Inject]
    ProductLLVGService productService { get; set; }

    [Inject]
    NavigationManager navigation { get; set; }

    SearchResultProductLLVGDTO searchResult = new SearchResultProductLLVGDTO();
    SearchQueryProductLLVGDTO searchQuery = new SearchQueryProductLLVGDTO { Take = 10 };
    List<Pagination> paginations = new List<Pagination>();
    int skipAnte = 0;
    int skipSi = 0;

    private async Task Search()
    {
        searchResult = await productService.Search(searchQuery);
    }

    protected override async Task OnInitializedAsync()
    {
        searchQuery.SendRowCount = 2;
        searchQuery.Skip = 0;
        await Search();
        UpdatePagination();
    }

    private async Task SubmitSearch()
    {
        searchQuery.SendRowCount = 2;
        searchQuery.Skip = 0;
        await Search();
        UpdatePagination();
    }

    private async Task PaginationSearch(int skip)
    {
        int countRowTemp = searchResult.CountRow;
        searchQuery.SendRowCount = 1;
        searchQuery.Skip = skip;
        await Search();
        searchResult.CountRow = countRowTemp;
        UpdatePagination();
    }

    private void GoEdit(int productId)
    {
        navigation.NavigateTo($"/edit-product/{productId}");
    }

    private void GoDetails(int productId)
    {
        navigation.NavigateTo($"/product-details/{productId}");
    }

    private void GoDelete(int productId)
    {
        navigation.NavigateTo($"/delete-product/{productId}");
    }

    private void UpdatePagination()
    {
        paginations = new List<Pagination>();
        int totalPages = (int)Math.Ceiling((double)searchResult.CountRow / searchQuery.Take);
        skipAnte = searchQuery.Skip > 0 ? searchQuery.Skip - searchQuery.Take : 0;
        int skipMax = 0;

        for (var i = 0; i < totalPages; i++)
        {
            var pagination = new Pagination()
                {
                    Skip = i * searchQuery.Take,
                    NumPage = i + 1
                };

            paginations.Add(pagination);
            skipMax = pagination.Skip;
        }

        skipSi = searchQuery.Skip + searchQuery.Take;
        skipSi = skipSi > skipMax ? skipMax : skipSi;
    }

    class Pagination
    {
        public int NumPage { get; set; }
        public int Skip { get; set; }
    }
}
