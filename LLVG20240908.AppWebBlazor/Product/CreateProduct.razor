@page "/create-product"

@using LLVG20240907.DTOs.ProductsDTOs
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components
@using LLVG20240907.API.Services

<!-- Main Container -->
<section class="create-product-container p-4 bg-white rounded shadow-lg">
    @if (!isSuccess && !isError)
    {
        <h3 class="text-center mb-4">Crear Nuevo Producto</h3>

        <EditForm Model="product" OnValidSubmit="Create">
            <DataAnnotationsValidator />
            <div class="row">
                <div class="col-md-6 mb-4">
                    <div class="form-group">
                        <label for="NombreLLVG" class="form-label">Nombre del Producto:</label>
                        <InputText class="form-control" id="NombreLLVG" @bind-Value="product.NombreLLVG" placeholder="Ingrese nombre del producto" />
                        <ValidationMessage For="() => product.NombreLLVG" />
                    </div>
                </div>
                <div class="col-md-6 mb-4">
                    <div class="form-group">
                        <label for="DescripcionLLVG" class="form-label">Descripción:</label>
                        <InputTextArea class="form-control" id="DescripcionLLVG" @bind-Value="product.DescripcionLLVG" placeholder="Ingrese una descripción" rows="3" />
                        <ValidationMessage For="() => product.DescripcionLLVG" />
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-md-6 mb-4">
                    <div class="form-group">
                        <label for="PrecioLLVG" class="form-label">Precio:</label>
                        <InputNumber class="form-control" id="PrecioLLVG" @bind-Value="product.PrecioLLVG" placeholder="Ingrese el precio" />
                        <ValidationMessage For="() => product.PrecioLLVG" />
                    </div>
                </div>
            </div>
            <div class="text-center">
                <button type="submit" class="btn btn-success">Guardar Producto</button>
                <NavLink href="/product-list" class="btn btn-outline-secondary ms-3">Cancelar</NavLink>
            </div>
        </EditForm>
    }
    else if (isError)
    {
        <div class="alert alert-success text-center" role="alert">
           
            <h4 class="alert-heading">¡Éxito!</h4>
            <p>Producto creado con éxito.</p>
          
            <hr />
            <div class="d-flex justify-content-center">
            
                <NavLink href="/product-list" class="btn btn-secondary">Ir a Buscar Productos</NavLink>
            </div>
        </div>
    }
    else if (isSuccess)
    {
        <div class="alert alert-danger text-center" role="alert">
            <h4 class="alert-heading">Error</h4>
           
            <p>Ocurrió un error al intentar registrar el producto.</p>
            <hr />
            <div class="d-flex justify-content-center">
                <NavLink href="/create-product" class="btn btn-primary me-2">Crear Otro Producto</NavLink>
                <NavLink href="/product-list" class="btn btn-secondary">Ir a Buscar Productos</NavLink>
            </div>
        </div>
    }
</section>

@code {
    // Inyección del ProductService para interactuar con los datos del producto
    [Inject]
    ProductLLVGService productService { get; set; }

    // Instancia de CreateProductLLVGDTO para la creación del nuevo producto
    CreateProductLLVGDTO product = new CreateProductLLVGDTO();
    bool isSuccess = false;  // Indicador para éxito en la creación
    bool isError = false;    // Indicador para errores en la creación

    private async Task Create()
    {
        try
        {
            var result = await productService.Create(product);
            if (result > 0)  // Considera el resultado positivo para éxito
            {
                isSuccess = true;
            }
            else
            {
                isError = true;
            }
        }
        catch (Exception ex)
        {
            // Manejo de excepciones para detectar problemas inesperados
            isError = true;
        }
    }

    private void GoCreate()
    {
        isSuccess = false;  // Reiniciar isSuccess para una nueva creación
        isError = false;    // Reiniciar isError para un estado limpio
    }
}
