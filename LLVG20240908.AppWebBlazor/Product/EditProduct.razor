@page "/edit-product/{Id:int}"

@using LLVG20240907.DTOs.ProductsDTOs
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components
@using LLVG20240907.API.Services

<section class="edit-product-section p-4 bg-light rounded shadow-lg">
    @if (!isSuccess && !isError)
    {
        <h3 class="text-center mb-4">Editar Producto</h3>

        <EditForm Model="product" OnValidSubmit="Edit">
            <DataAnnotationsValidator />
            <div class="row mb-3">
                <div class="col-md-6 mb-3">
                    <div class="form-group">
                        <label for="NombreLLVG">Nombre:</label>
                        <InputText class="form-control" id="NombreLLVG" @bind-Value="product.NombreLLVG" placeholder="Ingrese el nombre del producto" />
                        <ValidationMessage For="() => product.NombreLLVG" />
                    </div>
                </div>
                <div class="col-md-6 mb-3">
                    <div class="form-group">
                        <label for="DescripcionLLVG">Descripción:</label>
                        <InputTextArea class="form-control" id="DescripcionLLVG" @bind-Value="product.DescripcionLLVG" placeholder="Ingrese una descripción del producto" />
                        <ValidationMessage For="() => product.DescripcionLLVG" />
                    </div>
                </div>
            </div>
            <div class="row mb-4">
                <div class="col-md-6 mb-3">
                    <div class="form-group">
                        <label for="PrecioLLVG">Precio:</label>
                        <InputNumber class="form-control" id="PrecioLLVG" @bind-Value="product.PrecioLLVG" placeholder="Ingrese el precio del producto" />
                        <ValidationMessage For="() => product.PrecioLLVG" />
                    </div>
                </div>
            </div>
            <div class="text-center">
                <button type="submit" class="btn btn-primary">Guardar Cambios</button>
                <NavLink href="/product-list" class="btn btn-outline-secondary ms-2">Cancelar</NavLink>
            </div>
        </EditForm>
    }
    else if (isSuccess)
    {
        <div class="alert alert-success text-center" role="alert">
            <h4 class="alert-heading">¡Éxito!</h4>
            <p>Producto modificado con éxito.</p>
            <hr />
            <NavLink href="/product-list" class="btn btn-primary">Ver lista de productos</NavLink>
        </div>
    }
    else if (isError)
    {
        <div class="alert alert-danger text-center" role="alert">
            <h4 class="alert-heading">Error</h4>
            <p>Ocurrió un error al intentar modificar el producto.</p>
            <hr />
            <NavLink href="/product-list" class="btn btn-primary">Volver a intentar</NavLink>
        </div>
    }
</section>

@code {
    [Parameter]
    public int Id { get; set; }

    [Inject]
    private ProductLLVGService productService { get; set; }

    EditProductLLVGDTO product = new EditProductLLVGDTO();
    bool isSuccess = false;
    bool isError = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var productDetail = await productService.GetById(Id);
            if (productDetail != null)
            {
                product = new EditProductLLVGDTO
                    {
                        Id = productDetail.Id,
                        NombreLLVG = productDetail.NombreLLVG,
                        DescripcionLLVG = productDetail.DescripcionLLVG,
                        PrecioLLVG = productDetail.PrecioLLVG
                    };
            }
            else
            {
                isError = true; // Product not found
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception: {ex.Message}");
            isError = true;
        }
    }

    private async Task Edit()
    {
        try
        {
            var result = await productService.Edit(product);

            isSuccess = result > 0;  // Success if result is greater than 0
            isError = !isSuccess;    // Error if not successful
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception: {ex.Message}");
            isError = true;
        }
    }
}
